

@Library('piplinesharedlib') _
import org.apache.commons.lang.StringUtils
@Grab('org.yaml:snakeyaml:1.17')
import org.yaml.snakeyaml.Yaml
import org.yaml.snakeyaml.DumperOptions
import static org.yaml.snakeyaml.DumperOptions.FlowStyle.BLOCK

@NonCPS
String yamlToString(Object data){
    def opts = new DumperOptions()
    opts.setDefaultFlowStyle(BLOCK)
    return new Yaml(opts).dump(data)
}
pipeline {
    agent {
        label "v-s6-k8s-n2"
    }
 options { 
       timestamps()
       timeout(time: 2, unit: 'HOURS')   // timeout on whole pipeline job
  
    }
    parameters {
        string(defaultValue: '8.0.20.8', description: 'ImageVersion', name: 'ImageVersion')
        string(defaultValue: "", description: 'branch', name: 'branch')
        string(defaultValue: "benny.levinger1@hp.com", description: 'defaultmaillist', name: 'defaultmaillist')
        string(defaultValue: "", description: 'repo', name: 'repo')
        string(defaultValue: 'S6', description: 'Project', name: 'project')
        
        
    }
    stages {
        stage('build and push') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: "origin/${branch}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: "${branch}"], [$class: 'WipeWorkspace']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '51482bc4-7bcb-49c9-8852-b778c3fd8fb4', url: 'http://v-git.indigo.co.il:7990/scm/${project}/${repo}.git']]])
                sh 'printenv'
                script {
                    
                          
                            def valuesYaml = readYaml file: "values.yaml" // read  values yaml
                            comp = valuesYaml.getAt('name')
                            echo "comp is ${comp}"
                            valuesYaml.project_components.each { e -> 
                            echo "running commands for: component: ${e.getAt('component')}"
                                buildType = e.getAt('buildType')
                                echo "buildType : ${buildType}"
                                echo "ImageVersion ${env.ImageVersion}"
                                if ( buildType == "overrideversion")
                                {
                                    semver = getSemVersion(comp,env.ImageVersion)
                                    e.version=semver
                                }
                                if ( buildType == "getnuget")
                                {
                                    e.version=env.ImageVersion     
                                }
                                if ( buildType == "movetocontent")
                                {
                                    e.version=env.ImageVersion    
                                }


                            }
                            
                            echo "Post foreach ...... "                         
                            filename = "values.yaml"
                            writeFile file: filename, text:yamlToString(valuesYaml)
          
                        }  
                        commitValueYaml("http://v-git.indigo.co.il:7990/scm/${project}/${repo}.git")
                      
                         
                
            }
        }

    } // end of stages
   post {
		always {
			echo 'One way or another, I have finished'
			onAlwayes()
			
			
		}
        success {
            echo 'I succeeeded!'
            onSuccess()   
           
        }
       
        failure {
            echo 'I failed :('
            onFailure()
            }
         aborted {
        onAborted()
	  }
       
    
       
    } // end of post
} // end of pipeline

